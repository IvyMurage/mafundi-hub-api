continue
res.inspect
res
continue
      user = User.find_by(id: user_id)
      user_id = Integer(payload["sub"])
payload
      payload, header = JWT.decode(token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
    token = request.headers["Authorization"].split(" ").last
continue
payload
payload[0]
      user = User.find_by(id: Integer(payload[0]["sub"]))
      payload, header = JWT.decode(token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
token = request.headers["Authorization"].split(" ").last
   13:     token = request.headers["Authorization"].split(" ").last
authenticate!
continue
user = User.find_by(id:Integer(payload[0]["sub"]))
Integer(payload[0]["sub"])
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
@token = token
Integer(payload[0]["sub"])
user_id
continue
user = User.find_by(id:Integer(payload[0]["sub"]))
Integer(payload[0]["sub"])
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
@token = token
continue
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
payload.last
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
payload.last
Integer(payload[0]["sub"])
payload[0]["sub"]
payload[0]
payload
payload["sub"]
Integer(payload["sub"])
user = User.find_by(id:payload["sub"])
payload
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
@token = token
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
continue
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
@token = token
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
continue
payload = JWT.decode(@token, Rails.application.credentials.devise_jwt_secret_key, true, { algorithm: "HS256" })
payload = JWT.decode(@token, Rails.application.credentials.secret_key_base, true, { algorithm: "HS256" })
@token = token
continue
payload = JWT.decode(@token, Rails.application.credentials.secret_key_base, true, { algorithm: "HS256" })
@token = token
continue
@token
payload = JWT.decode(@token, Rails.application.credentials.secret_key_base, true, { algorithm: "HS256" })
payload = JWT.decode(@token)
payload = JWT.decode(@token, Rails.application.credentials.secret_key_base, true, { algorithm: "HS256" })
@token
@token = token
token
payload = JWT.decode(token, Rails.application.credentials.secret_key_base, true, { algorithm: "HS256" })
Rails.application.credentials.secret_key_base
Rails.application.credentials.secret_key_base,
token
continue
token
continue
valid?
authenticate!
continue
authenticate!
token
payload
valid?
continue
current_user
continue
params[:user_id]
user
continue
user
@user.email
@user
continue
user.email
user
continue
params[:email]
params[:query]
params
 User.where("email ILIKE ?", "%#{User.sanitize_sql_like(params[:query])}%")
continue
params
 User.where("email ILIKE ?", "%#{User.sanitize_sql_like(params[:query])}%")
user = User.where("email ILIKE ?", "%#{User.sanitize_sql_like(params[:query])}%")
User.where("email ILIKE ?",
   25:                          "%#{User.sanitize_sql_like(params[:query])}%")
params
continue
business_short_code
continue
@consumer_secret
continue
@consumer_secret
@consumer_key
continue
url
params
phoneNumber
payload
continue
password
payload
continue
payload
continue
payload
continue
params
payload
continue
passkey
continue
password
passkey
business_short_code
continue
user
continue
user
continue
user
continue
options
continue
api_key
data
body
title
device_token
device_toke
continue
user
continue
user
continue
user
continue
params
current_user.role
continue
ActiveStorage::Attached::Many.class
@handyman.work_photos.class
@handyman.work_photos
continue
params[:work_photos]
params
continue
@handyman.work_photos
@handyman
@hanydman
continue
params[:work_photos]
params
continue
location_attributes
continue
@handyman.location
continue
params[:location_attributes][:city]
continue
params[:location_attributes]
continue
params
continue
@handyman.location
params[:location_attributes]
continue
task_params[:task_responsibilities]
task_params
continue
current_user
user
continue
user
continue
user
current_user
user
continue
user
continue
user.role == "client"
user
continue
res[0]
res
res = can :manage, :task if user.role == "client"
user
continue
user.role == "client"
continue
user
continue
user.role
user
continue
user.role
user
continue
UserSerializer.new(object.user).attributes[:email]
UserSerializer.new(object.user).attributes
UserSerializer.new(object.user).attributes.email
UserSerializer.new(object.user).attributes
object.user
continue
avatar.attached?
continue
avatar.attached? && avatar.content_type.in?(%w(image/jpeg image/png))
continue
avatar.attached? && avatar.content_type.in?(%w(image/jpeg image/png))
avatar.content_type
avatar.attached?
avatar.attached? && !avatar.content_type.in?(%w(image/jpeg image/png))
avatar.attached?
continue
avatar
avatar.size
avatar.content_type
avatar
continue
current_user.avatar.attached?
current_user.attached?
current_user
continue
avatar
params
continue
current_user.avatar.attach(params[:avatar])
current_user.avatar.attach
params[:avatar].present?
params[:avatar]
params
current_user
continue
avatar
params
continue
@service_categories
params[:query]
params
continue
